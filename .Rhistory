good
predict1
predict1 == predict2
good <- predict1 == predict2
length(good)
length(predict1)
predictBoth <- predict1[good]
predictBoth <- predict1[good, ]
resultsBoth <- vowel.test$y[good, ]
predictBoth <- predict1[good]
sum(good)
length(predictBoth)
resultsBoth <- vowel.test$y[good]
sum(predictBoth == resultsBoth) / length(predictBoth)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod1 <- train(diagnosis ~ ., data = training, method="rf")
mod2 <- train(diagnosis ~ ., data = training, method = "gbm")
mod2 <- train(diagnosis ~ ., data = training, method = "lda")
predict1 <- predict(mod1, testing)
predict2 <- predict(mod2, testing)
predict3 <- predict(mod3, testing)
mod2 <- train(diagnosis ~ ., data = training, method = "gbm")
mod3 <- train(diagnosis ~ ., data = training, method = "lda")
predict1 <- predict(mod1, testing)
predict2 <- predict(mod2, testing)
predict3 <- predict(mod3, testing)
all <- data.frame(predict1, predict2, predict3, res = testing$diagnosis)
modAll <- train(res ~ ., data = all, method = "rf")
predictAll <- predict(modAll, all)
predict1 <- predict(mod1, training)
predict2 <- predict(mod2, training)
predict3 <- predict(mod3, training)
all <- data.frame(predict1, predict2, predict3, res = training$diagnosis)
modAll <- train(res ~ ., data = all, method = "rf")
predictAll <- predict(modAll, all)
predict1 <- predict(mod1, testing)
(predict1 == testing$diagnosis) / length(predict1)
length(predict1)
length(testing$diagnosis)
predict1 <- predict(mod1, testing)
sum(predict1 == testing$diagnosis) / length(predict1)
predict2 <- predict(mod3, testing)
sum(predict3 == testing$diagnosis) / length(predict3)
predict1 <- predict(mod1, testing)
sum(predict1 == testing$diagnosis) / length(predict1)
predict2 <- predict(mod2, testing)
sum(predict2 == testing$diagnosis) / length(predict2)
predict3 <- predict(mod3, testing)
sum(predict3 == testing$diagnosis) / length(predict3)
predictAll <- predict(modAll, testing)
sum(predictAll == testing$diagnosis) / length(predictAll)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
??plot.enet
?train
modFit <- train(CompetitiveStrength ~ ., data = training, method = "lasso")
modFit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
modFit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
summary(modFit)
modFit$call
modFit$actions
modFit$L1norm
dim(concrete)
modFit$xNames
head(modFit)
?plot.enet
plot.enet(modFit)
plot.enet(modFit, use.color=T)
plot.enet(training, use.color=T)
?modFit
modFit
?enet
modFit <- enet(training, training$CompressiveStrength, normalize=T)
modFit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
plot.enet(modFit$finalModel)
?plot.enet
plot.enet(modFit$finalModel, use.color=T)
dat = read.csv("~/Downloads/gaData.csv")
training = dat[year(dat$date)  2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv("~/Downloads/gaData.csv")
training = dat[year(dat$date)  2011,]
training = dat[year(dat$date) == 2011,]
?year
??year
dat$date
year(dat$date)
year(as.Date(dat$date))
as.Date(dat$date[1])
year(as.Date(dat$date[1]))
as.numeric(format(dat$date, "%Y"))
as.numeric(format(dat$date[1], "%Y"))
as.numeric(format(as.Date(dat$date), "%Y"))
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
?bats
bats(tstrain)
?forecast
modFit <- bats(tstrain)
testing = dat[dat$year != 2011, ]
forecast(modFit, testing$visitsTumblr)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year != 2011, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
dat = read.csv("~/Downloads/gaData.csv")
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year != 2011, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
lines(ma(tstrain, order=3), col="red")
lines(ma(tstrain, order=3), col="red")
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="red")
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
accuracy(fcast, tstest)
dat = read.csv("~/Downloads/gaData.csv")
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year != 2011, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
dat$year
summary(dat$year)
dat = read.csv("~/Downloads/gaData.csv")
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
training$year
testing$year
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
plot(tstrain)
plot(tstest)
plot(fcast); lines(tstest, col="blue")
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = window(ts(training$visitsTumblr), start = 0, end=5)
tstest = window(ts(testing$visitsTumblr), start = 5, end = 10)
plot(tstrain)
plot(tstest)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
tstrain = window(ts(training$visitsTumblr), start = 0, end=5)
tstest = window(ts(testing$visitsTumblr), start = 5, end = 10)
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = window(ts(training$visitsTumblr), start = 0, end=5)
tstest = window(ts(testing$visitsTumblr), start = 5, end = 10)
plot(tstrain)
plot(tstest)
tstrain <- window(tstrain, start=0, end=length(tstrain))
tstest <- window(tstest, start=length(tstrain), end=length(tstrain) + length(tstest))
plot(tstrain)
plot(tstest)
plot(tstrain)
plot(tstest)
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
tstrain <- window(tstrain, start=0, end=length(tstrain))
plot(tstrain)
tstest <- window(tstest, start=length(tstrain), end=length(tstrain) + length(tstest))
plot(tstest)
plot(tstrain)
plot(tstest)
lines(ma(tstrain, order=3), col="red")
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
plot(tstest)
plot(fcast); lines(tstest, col="blue")
plot(tstest)
plot(fcast); lines(tstest, col="blue")
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
?window
tstrain <- window(tstrain)
plot(tstrain)
training$visitsTumblr
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
summary(fcast)
plot(tstest)
summary(fcast)
fcast$Forecasts
fcast$lower
sum(tstest >= fcast$lower && tstest <= fcast$higher)
dim(tstest)
length(tstest)
length(fcast$lower)
dim(fcast$lower)
dim(fcast$lower[[2]])
dim(fcast$lower[2])
fcast$lower[1]
fcast$lower[1,]
fcast$lower[,1]
fcast$lower[,2]
sum(tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
length(tstest)
length(fcast$lower[,2])
?forecast
fcast <- forecast(bats(tstrain), h = length(tstest))
sum(tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
length(tstest)
length(fcast$lower[,2])
sum(tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
comp <- tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2]
?sum
sum(comp, na.rm=T)
head(sum)
head(comp)
comp
comp <- (tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
tstest >= fcast$lower[,2]
sum(tstest >= fcast$lower[,2])
sum(tstest <= fcast$higher[,2])
fcast$higher[,2]
fcast$higher
fcast$upper[,2]
comp <- (tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
head(comp)
comp <- (tstest >= fcast$lower[,2] && tstest <= fcast$upper[,2])
sum(comp)
comp
tstest <= fcast$upper[,2]
sum(tstest >= fcast$lower[,2])
sum(tstest <= fcast$upper[,2])
sum(tstest <= fcast$upper[,2]) / 235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- train(CompressiveStrength ~ ., data = concrete, method="e1071")
install.packages("e1071")
install.packages("e1071")
library(e1071)
modFit <- train(CompressiveStrength ~ ., data = concrete, method="e1071")
modFit <- train(CompressiveStrength ~ ., data = concrete, method="svm")
?train
modFit <- train(CompressiveStrength ~ ., data = concrete, method="svmLinear")
?svm
modFit <- svm(CompressiveStrength ~ ., data = training)
predict(modFit, testing)
summary(predict(modFit, testing))
predict(modFit, testing)
pred <- predict(modFit, testing)
summary(pred)
accuracy(pred, testing)
RMSE(pred, testing)
set.seed(325)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(modFit, testing)
RMSE(pred, testing)
?RMSE
sqrt
sqrt(415.1742)
415.1742 / length(testing)
RMSE(pred, testing)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(modFit, testing)
RMSE(pred, testing)
?svm
pred <- predict.svm(modFit, testing)
RMSE(pred, testing)
?predict.svm
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, testing)
pred <- predict.svm(modFit, testing)
View(concrete)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, testing)
RMSE(pred, testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, testing)
RMSE(pred, testing)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, testing)
RMSE(pred, testing)
?predict.svm
pred <- predict.svm {e1071}(modFit, testing)
pred <- predict.svm(modFit, testing)
?predict.svm
pred <- predict.svm(modFit, newdata = testing)
library(e1071)
predict.svm
?predict.svm
pred <- predict(modFit, newdata = testing)
modFit <- svm(CompressiveStrength ~ ., data = training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, newdata = testing)
RMSE(pred, testing)
RMSE(predict.svm(modFit, newdata = testing), testing)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
RMSE(predict(modFit, newdata = testing), testing)
RMSE(predict_svm(modFit, newdata = testing), testing)
RMSE(predictsvm(modFit, newdata = testing), testing)
install.packages("e1071")
install.packages("e1071")
RMSE(predict.svm(modFit, newdata = testing), testing)
predict.svm(modFit, newdata = testing)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
RMSE(svm.predict(modFit, newdata = testing), testing)
RMSE(predict(modFit, newdata = testing), testing)
modFit <- svm(CompressiveStrength ~ ., data = training)
??predict
?predict
e1071.predict
e1071::predict
e1071::predict.svm
e1071::predict.svm()
e1071::predict.svm(modFit, testing)
e1071::predict.svm(modFit, newdata = testing)
stats::predict
e1071::predict
e1071::predict.svm
lm
colSums
dgamma
predict
?lm
?dgamma
?predict
dataset(Titanic)
datasets(Titanic)
require(graphics)
dataset(Titanic)
data(Titanic)
summary(Titanic)
??exists
2 + 2
file.exists('train.csv')
getwd()
setwd("/Users/thanhtnguyen/Coursera/DevelopingDataProduct/Ass")
file.exists('train.csv')
Titanic = read.csv('train.csv')
names(Titanic)
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Titanic = read.csv('train.csv')
names(Titanic)
Titanic$Fare
head(Titanic$Fare)
head(Titanic$Pclass)
names(Titanic)
head(Titanic$SibSp)
head(Titanic$Parch)
summary(Titanic$Parch)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
